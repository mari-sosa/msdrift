{"processing_server":"typhoon","pipelines":[{"spec":{"name":"test","description":"","inputs":[{"name":"timeseries"}],"outputs":[{"name":"timeseries_out"}],"parameters":[{"name":"t1"},{"name":"t2"},{"name":"channels","optional":true}]},"steps":[{"step_type":"processor","processor_name":"pyms.extract_timeseries","inputs":{"timeseries":"raw"},"outputs":{"timeseries_out":"timeseries_out"},"parameters":{"channels":"1,2,3,14,15,16","t1":"-1","t2":"-1"}},{"step_type":"processor","processor_name":"pyms.extract_timeseries","inputs":{"timeseries":"timeseries_out"},"outputs":{"timeseries_out":"raw1"},"parameters":{"channels":"","t1":"0","t2":"2592000000"}},{"step_type":"pipeline","pipeline_name":"sort_on_segments","inputs":{"raw":"raw1","filt":"filt","pre":"pre"},"outputs":{"firings_out":"firings1","firings_original_out":"","dmatrix_out":"","dmatrix_templates_out":"","time_offsets_out":"time_offsets_out"},"parameters":{"samplerate":"30000","detect_sign":"1","curate":"true","start_time_minutes":"true","segment_duration_minutes":"true","total_duration_minutes":"true","detect_threshold":"3","time_offsets":"true","run_metrics":"true","mask_out_artifacts":"true","start_time":"true","total_duration":"true","detect_interval":""}}],"input_files":[],"output_files":[]},{"name":"sort","script":"/* Define the spec */\ninputs_opt('raw','filt','pre','geom');\noutputs('firings_out');\noutputs_opt('filt_out','pre_out','firings_out');\nparam('samplerate',30000);\nparam('freq_min',600);\nparam('freq_max',6000);\nparam('freq_wid',1000);\nparam('whiten','true');\nparam('detect_threshold',3);\nparam('detect_sign',1);\nparam('detect_interval',10);\nparam('clip_size',50);\nparam('adjacency_radius',-1);\nparam('mask_out_artifacts','true');\n\n      \n\n_Pipeline.run=function(X) {\n  var pp=X.parameters;\n  \n  var pre='pre';\n  if (!X.hasInput('pre')) {\n    \n    var filt='filt';\n    if (!X.hasInput('filt')) {\n      if (!X.hasInput('raw')) {\n        console.error('Missing input: raw, filt or pre');\n        return -1;\n      }\n      X.runProcess('ms3.bandpass_filter',\n                   {timeseries:'raw'},\n                   {timeseries_out:'filt_out'},\n                   {samplerate:pp.samplerate,freq_min:pp.freq_min,freq_max:pp.freq_max,freq_wid:pp.freq_wid}\n                  );\n      if (pp.mask_out_artifacts=='true') {\n        X.runProcess('ms3.mask_out_artifacts',\n                   {timeseries:'filt_out'},\n                   {timeseries_out:'filt_out_masked'},\n                   {threshold:5,interval_size:2000}\n                  );\n        filt='filt_out_masked';\n        }\n        else {\n          filt='filt_out';\n        }\n    }\n    \n    if (pp.whiten=='true') {\n      X.runProcess('ms3.whiten',\n                   {timeseries:filt},\n                   {timeseries_out:'pre_out'},\n                   {}\n                  );\n    }\n    else {\n      X.runProcess('pyms.normalize_channels',\n                   {timeseries:'filt'},\n                   {timeseries_out:'pre_out'},\n                   {}\n                  );\n    }\n    pre='pre_out';\n  }\n  \n  \n  var firings1='firings_out';\n  \n  var p={\n    detect_threshold:pp.detect_threshold,\n    detect_sign:pp.detect_sign,\n    adjacency_radius:pp.adjacency_radius,\n    detect_interval:pp.detect_interval,\n    clip_size:pp.clip_size\n  };\n  var inputs={timeseries:pre};\n  if (X.hasInput('geom')) {\n    inputs.geom='geom';\n  }\n  X.runProcess('mountainsortalg.ms3alg',\n               inputs,\n               {firings_out:firings1},\n               p);\n              \n};\n\n/////////////////////////////////////////////////////////////////////\n\n\nfunction param(str,val) {\n      if (val===undefined) {\n        _Pipeline.spec.parameters.push({name:str});\n      }\n      else {\n        _Pipeline.spec.parameters.push({name:str,optional:true,default_value:val});\n      }\n}\n                \nfunction inputs(str1,str2,str3,str4) {\n  if (str1) _Pipeline.spec.inputs.push({name:str1});\n  if (str2) _Pipeline.spec.inputs.push({name:str2});\n  if (str3) _Pipeline.spec.inputs.push({name:str3});\n  if (str4) _Pipeline.spec.inputs.push({name:str4});\n}\n\nfunction inputs_opt(str1,str2,str3,str4) {\n  if (str1) _Pipeline.spec.inputs.push({name:str1,optional:true});\n  if (str2) _Pipeline.spec.inputs.push({name:str2,optional:true});\n  if (str3) _Pipeline.spec.inputs.push({name:str3,optional:true});\n  if (str4) _Pipeline.spec.inputs.push({name:str4,optional:true});\n}\n\nfunction outputs(str1,str2,str3,str4) {\n  if (str1) _Pipeline.spec.outputs.push({name:str1});\n  if (str2) _Pipeline.spec.outputs.push({name:str2});\n  if (str3) _Pipeline.spec.outputs.push({name:str3});\n  if (str4) _Pipeline.spec.outputs.push({name:str4});\n}\n\nfunction outputs_opt(str1,str2,str3,str4) {\n  if (str1) _Pipeline.spec.outputs.push({name:str1,optional:true});\n  if (str2) _Pipeline.spec.outputs.push({name:str2,optional:true});\n  if (str3) _Pipeline.spec.outputs.push({name:str3,optional:true});\n  if (str4) _Pipeline.spec.outputs.push({name:str4,optional:true});\n}","export":true,"steps":[],"spec":{"name":"","description":"","inputs":[],"outputs":[],"parameters":[]}},{"name":"sort_on_segments","script":"/* Define the spec */\ninputs_opt('raw','filt','pre','geom');\noutputs('firings_out');\noutputs_opt('filt_out','pre_out','firings_out','dmatrix_out');\noutputs_opt('k1_dmatrix_out','k2_dmatrix_out','dmatrix_templates_out');\noutputs_opt('time_offsets_out');\nparam('samplerate',30000);\nparam('freq_min',600);\nparam('freq_max',6000);\nparam('freq_wid',1000);\nparam('whiten','true');\nparam('detect_threshold',3);\nparam('detect_sign',1);\nparam('detect_interval',10);\nparam('clip_size',50);\nparam('adjacency_radius',-1);\nparam('mask_out_artifacts','true');\n\nparam('start_time',0);\n//param('segment_duration_minutes',10);\nparam('total_duration',60);\nparam('time_offsets',[]);\n\n_Pipeline.run=function(X) {\n  var pp=X.parameters;\n\n  var pre='pre';\n  if (!X.hasInput('pre')) {\n\n    var filt='filt';\n    if (!X.hasInput('filt')) {\n      if (!X.hasInput('raw')) {\n        console.error('Missing input: raw, filt or pre');\n        return -1;\n      }\n      X.runProcess('ms3.bandpass_filter',\n                   {timeseries:'raw'},\n                   {timeseries_out:'filt_out'},\n                   {samplerate:pp.samplerate,freq_min:pp.freq_min,freq_max:pp.freq_max,freq_wid:pp.freq_wid}\n                  );\n      if (pp.mask_out_artifacts=='true') {\n      X.runProcess('ms3.mask_out_artifacts',\n                   {timeseries:'filt_out'},\n                   {timeseries_out:'filt_out_masked'},\n                   {threshold:5,interval_size:2000}\n                  );\n      filt='filt_out_masked';\n      }\n      else {\n          filt='filt_out';\n      }\n    }\n\n    if (pp.whiten=='true') {\n      X.runProcess('ms3.whiten',\n                   {timeseries:filt},\n                   {timeseries_out:'pre_out'},\n                   {}\n                  );\n    }\n    else {\n      X.runProcess('pyms.normalize_channels',\n                   {timeseries:'filt'},\n                   {timeseries_out:'pre_out'},\n                   {}\n                  );\n    }\n    pre='pre_out';\n  }\n\n  var time_offsets=pp.time_offsets.split(',');\n \n  console.log ('Time_offsets '+time_offsets);\n  console.log (time_offsets.length);\n  var start_time=Number(pp.start_time);\n  var total_duration=Number(pp.total_duration);\n\n  var num_segments=Number(time_offsets.length); \n  console.log ('Using '+num_segments+' segments...');\n  \n \n//var segment_duration=\n  //\tvar segment_duration=Number(pp.segment_duration_minutes)*Number(pp.samplerate)*60;\n  \n\n  var p={\n    detect_threshold:pp.detect_threshold,\n    detect_sign:pp.detect_sign,\n    adjacency_radius:pp.adjacency_radius,\n    detect_interval:pp.detect_interval,\n    clip_size:pp.clip_size\n  };\n  var inputs={timeseries:pre};\n  if (X.hasInput('geom')) {\n    inputs.geom='geom';\n  }\n\n  var firings_list=[];\n  var timeseries_list=[];\n \n  for (var iseg=0; iseg<num_segments; iseg++) {\n    var t1=Math.floor(Number(time_offsets[iseg])); \n    var t2=Math.floor(Number(time_offsets[iseg+1]))-1; \n        if (isNaN(t1)) {\n        console.error('Time segment is NaN');\n        return -1;\n        }\n    if (t2>=start_time+total_duration || isNaN(t2)) t2=Math.floor(start_time+total_duration-1);\n\tconsole.log (start_time);\n    console.log (iseg);\n    var segment_duration = t2-t1;\n    console.log (segment_duration);\n    console.log ('Segment '+(iseg+1)+': t1='+t1+', t2='+t2+', t1_min='+(t1/Number(pp.samplerate)/60)+', t2_min='+(t2/Number(pp.samplerate)/60));\n\n    X.runProcess('pyms.extract_timeseries',\n                 {timeseries:'pre_out'},\n                 {timeseries_out:'pre-'+(iseg+1)},\n                 {t1:t1,t2:t2});\n    X.runPipeline('sort',\n              {pre:'pre-'+(iseg+1)},\n              {firings_out:'firings-'+(iseg+1)},\n              p);\n\n    firings_list.push('firings-'+(iseg+1));\n    timeseries_list.push('pre-'+(iseg+1));\n  }\n\n  X.runProcess('pyms.anneal_segments',\n               {timeseries_list:timeseries_list,\n               firings_list:firings_list},\n               {firings_out:'firings_out',dmatrix_out:'dmatrix_out',k1_dmatrix_out:'k1_dmatrix_out',k2_dmatrix_out:'k2_dmatrix_out',dmatrix_templates_out:'dmatrix_templates_out'},\n               {time_offsets:pp.time_offsets});\n  \n};\n\n/////////////////////////////////////////////////////////////////////\n\n\nfunction param(str,val) {\n      if (val===undefined) {\n        _Pipeline.spec.parameters.push({name:str});\n      }\n      else {\n        console.log('opt');\n        _Pipeline.spec.parameters.push({name:str,optional:true,default_value:val});\n      }\n}\n\nfunction inputs(str1,str2,str3,str4) {\n  if (str1) _Pipeline.spec.inputs.push({name:str1});\n  if (str2) _Pipeline.spec.inputs.push({name:str2});\n  if (str3) _Pipeline.spec.inputs.push({name:str3});\n  if (str4) _Pipeline.spec.inputs.push({name:str4});\n}\n\nfunction inputs_opt(str1,str2,str3,str4) {\n  if (str1) _Pipeline.spec.inputs.push({name:str1,optional:true});\n  if (str2) _Pipeline.spec.inputs.push({name:str2,optional:true});\n  if (str3) _Pipeline.spec.inputs.push({name:str3,optional:true});\n  if (str4) _Pipeline.spec.inputs.push({name:str4,optional:true});\n}\n\nfunction outputs(str1,str2,str3,str4) {\n  if (str1) _Pipeline.spec.outputs.push({name:str1});\n  if (str2) _Pipeline.spec.outputs.push({name:str2});\n  if (str3) _Pipeline.spec.outputs.push({name:str3});\n  if (str4) _Pipeline.spec.outputs.push({name:str4});\n}\n\nfunction outputs_opt(str1,str2,str3,str4) {\n  if (str1) _Pipeline.spec.outputs.push({name:str1,optional:true});\n  if (str2) _Pipeline.spec.outputs.push({name:str2,optional:true});\n  if (str3) _Pipeline.spec.outputs.push({name:str3,optional:true});\n  if (str4) _Pipeline.spec.outputs.push({name:str4,optional:true});\n}","export":true,"steps":[],"spec":{"name":"","description":"","inputs":[],"outputs":[],"parameters":[]}},{"spec":{"name":"extract_for_view","description":"","inputs":[],"outputs":[],"parameters":[]},"steps":[{"step_type":"processor","processor_name":"pyms.extract_subfirings","inputs":{"firings":"firings","channels":"channels","timeseries":"timeseries","t1":"true","t2":"true"},"outputs":{"firings_out":"subfirings"},"parameters":{}},{"step_type":"processor","processor_name":"pyms.extract_timeseries","inputs":{"timeseries":"timeseries"},"outputs":{"timeseries_out":"timeseries_subset"},"parameters":{"channels":"channels","t1":"true","t2":"true"}}],"input_files":[],"output_files":[],"export":true},{"spec":{"name":"calc_metrics","description":"","inputs":[{"name":"pre"},{"name":"firings"}],"outputs":[{"name":"metrics"}],"parameters":[{"name":"samplerate"}]},"steps":[{"step_type":"processor","processor_name":"ms3.cluster_metrics","inputs":{"timeseries":"pre","firings":"firings"},"outputs":{"cluster_metrics_out":"metrics1"},"parameters":{"samplerate":"${samplerate}"}},{"step_type":"processor","processor_name":"ms3.isolation_metrics","inputs":{"timeseries":"pre","firings":"firings"},"outputs":{"metrics_out":"metrics2"},"parameters":{"compute_bursting_parents":"true"}},{"step_type":"processor","processor_name":"ms3.combine_cluster_metrics","inputs":{"metrics_list":["metrics1","metrics2"]},"outputs":{"metrics_out":"metrics"},"parameters":{}}],"input_files":[],"output_files":[],"export":true},{"spec":{"name":"add_tags","description":"","inputs":[{"name":"metrics"}],"outputs":[{"name":"metrics_tagged"}],"parameters":[{"name":"firing_rate_thresh","optional":true,"default_value":".05"},{"name":"isolation_thresh","optional":true,"default_value":".95"},{"name":"noise_overlap_thresh","optional":true,"default_value":".03"},{"name":"mv2file","optional":true,"default_value":"[]"}]},"steps":[{"step_type":"processor","processor_name":"pyms.add_curation_tags","inputs":{"metrics":"metrics"},"outputs":{"metrics_tagged":"metrics_tagged"},"parameters":{"firing_rate_thresh":"${firing_rate_thresh}","isolation_thresh":"${isolation_thresh}","noise_overlap_thresh":"${noise_overlap_thresh}","mv2file":"${mv2file}","peak_snr_thresh":"1.5"}}],"input_files":[],"output_files":[],"export":true},{"spec":{"name":"merge_burst_parents","description":"","inputs":[{"name":"firings"},{"name":"metrics"}],"outputs":[{"name":"firings_merged"}],"parameters":[]},"steps":[{"step_type":"processor","processor_name":"pyms.merge_burst_parents","inputs":{"firings":"firings","metrics":"metrics"},"outputs":{"firings_out":"firings_merged"},"parameters":{}}],"input_files":[],"output_files":[],"export":true}],"input_files":[{"prv":{"original_checksum":"fd2d157fa98cd286b0794620848fd9e3ac3f3711","original_size":98,"original_fcs":"head1000-fd2d157fa98cd286b0794620848fd9e3ac3f3711","original_path":"geom.csv"},"name":"geom","on_server":false,"on_s3":false,"s3_address":""},{"prv":{"original_checksum":"4ae56b767adca6ff9d60b59204bba7f21bbbbd45","original_fcs":"head1000-214d3f88c7fe44b1b2e73e4bce099e7c12ccb109","original_size":96000000028,"original_path":"s3://mountainlab/misc/datasets/jason/drift_test/20161206_KF2_9-12_nt28/raw.mda","prv_version":"0.11"},"name":"raw","on_s3":true,"s3_address":"s3://mountainlab//misc/datasets/jason/drift_test/20161206_KF2_9-12_nt28/raw.mda","on_server":false}],"output_files":[],"jobs":[]}